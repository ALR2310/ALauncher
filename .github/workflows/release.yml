name: Build and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: read
  checks: read

env:
  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
  GITHUB_REPOSITORY: ${{ github.repository }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  VITE_CURSEFORGE_API_KEY: ${{ secrets.VITE_CURSEFORGE_API_KEY }}

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check version bump
        id: check
        shell: bash
        run: |
          CURRENT_VERSION=$(jq -r .version package.json)
          echo "Current: $CURRENT_VERSION"

          API="https://api.github.com/repos/${{ github.repository }}/releases/latest"
          LATEST_TAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$API" | jq -r .tag_name)

          if [ "$LATEST_TAG" = "null" ] || [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi

          LATEST_VERSION=${LATEST_TAG#v}
          echo "Latest: $LATEST_VERSION"

          if npx semver -r ">${LATEST_VERSION}" "$CURRENT_VERSION"; then
            echo "✅ Version bump detected"
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "⏭ Skip release: $CURRENT_VERSION <= $LATEST_VERSION"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Node.js
        if: steps.check.outputs.should_release == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        if: steps.check.outputs.should_release == 'true'
        run: yarn install --frozen-lockfile

      - name: Setup Rust
        if: steps.check.outputs.should_release == 'true'
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        if: steps.check.outputs.should_release == 'true'
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri'

      - name: Build & Release
        if: steps.check.outputs.should_release == 'true'
        run: yarn release
